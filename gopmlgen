#!/usr/bin/python -tt
# -*- coding: UTF-8 -*-
# vim: ts=4 sw=4 et ai si

"""
OPML generator for Google Reader
"""

__author__ = "Andy Shevchenko <andy.shevchenko@gmail.com>"
__version__ = "0.0.2"
__license__ = "GPLv2"

import os
import sys
import logging
import netrc
from optparse import OptionParser
import operator
import urllib2
from xml.etree import cElementTree

import gdata.youtube.service
import gdata.photos.service

LOG = logging.getLogger(os.path.basename(sys.argv[0]))

class OPMLGenError(Exception):
    pass

def get_auth_data(host):
    """ Return login, account and password tuple for given host if found """
    try:
        dotnetrc = netrc.netrc()
    except (IOError, netrc.NetrcParseError), err:
        raise OPMLGenError("Can't read ~/.netrc file")
    return dotnetrc.authenticators(host)

class Service(object):
    def __init__(self):
        self.name = self.__class__.__name__
        self.host = None
        self.ownfeed = False

    def login(self):
        try:
            login, _, passwd = get_auth_data(self.host)
        except TypeError:
            raise OPMLGenError("Can't get auth data for host '%s'" % self.host)

        try:
            self._login(login, passwd)
        except AttributeError:
            raise OPMLGenError("Login method is undefined")

    def opml(self, ownfeed=False):
        self.login()
        self.ownfeed = ownfeed
        try:
            return self._opml()
        except AttributeError:
            raise OPMLGenError("OPML generator for service '%s' is undefined" %
                    self.name)

class LiveJournalService(Service):
    def __init__(self):
        self.host = "www.livejournal.com"
        self.url = None

    def _login(self, login, passwd):
        self.url = "http://%s/tools/opml.bml?user=%s" % (self.host, login)

    def _opml(self):
        ufd = urllib2.urlopen(self.url)
        root = cElementTree.parse(ufd)
        for elem in root.findall('body/outline'):
            yield elem.get('text'), elem.get('xmlURL')

class YouTubeService(Service):
    def __init__(self):
        self.host = "www.youtube.com"
        self.client = gdata.youtube.service.YouTubeService()

    def _login(self, login, passwd):
        self.client.ClientLogin(login, passwd)

    def _opml(self):
        feed = self.client.GetYouTubeSubscriptionFeed()
        for entry in feed.entry:
            if entry.GetSubscriptionType() == 'channel':
                href = entry.feed_link[0].href.replace('api', 'base')
                yield entry.title.text, href
        if self.ownfeed:
            text = feed.title.text.replace("Subscriptions of",
                    "Videos published by :")
            href = feed.GetFeedLink().href
            yield text, href.replace('api', 'base').replace('/contacts', '')

class PicasaWebService(Service):
    def __init__(self):
        self.host = "picasaweb.google.com"
        self.client = gdata.photos.service.PhotosService()

    def _login(self, login, passwd):
        self.client.ClientLogin(login, passwd)

    def _opml(self):
        feed = self.client.GetContacts()
        for entry in feed.entry:
            href = entry.GetFeedLink().href.replace('api', 'base')
            yield entry.title.text, href
        if self.ownfeed:
            text = feed.title.text
            href = feed.GetFeedLink().href
            yield text, href.replace('api', 'base').replace('/contacts', '')

class OPMLGen(object):
    def __init__(self):
        self.module = sys.modules[globals()['__name__']]

    def list_supported_services(self):
        for attr in dir(self.module):
            if attr.endswith('Service') and attr != 'Service':
                yield attr.replace('Service', '')

    def get_service_by_name(self, name):
        for srv in self.list_supported_services():
            if srv.lower() == name.lower():
                return getattr(self.module, srv + "Service")()
        raise OPMLGenError("Service '%s' doesn't support" % name)

def save_to_file(service, output_fn, self=False, sort=False):
    out = []
    out.append("<?xml version='1.0'?>")
    out.append("<opml version='1.1'><head>")
    out.append("</head><body>")
    if sort:
        for desc, href in sorted(service.opml(self),
                key=operator.itemgetter(1)):
            out.append('<outline text="%s" xmlURL="%s" />' % (desc, href))
    else:
        for desc, href in service.opml(self):
            out.append('<outline text="%s" xmlURL="%s" />' % (desc, href))
    out.append("</body></opml>")
    if output_fn == '-':
        fd = sys.stdout
    else:
        fd = open(output_fn, 'w')

    for line in out:
        fd.write("%s\n" % line.encode('utf-8'))
    fd.close()

def main(argv):
    """ Main rountine """
    parser = OptionParser()

    parser.add_option("--service", dest="service", default="none",
            help="generate file for SERVICE")
    parser.add_option("--list", dest="list", action="store_true", default=False,
            help="list supported services")
    parser.add_option("--sort", dest="sort", action="store_true", default=False,
            help="sort output alphabetically")
    parser.add_option("--self", dest="self", action="store_true", default=False,
            help="add self feed to output")
    parser.add_option("--output", dest="output", default="-",
            help="save output to the FILE")

    (opts, args) = parser.parse_args(argv)

    # Setup logging
    formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s",
                                  "%b %d %H:%M:%S")
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(formatter)
    LOG.addHandler(handler)

    # Initialize main object
    opmlgen = OPMLGen()

    # Get supported services and print them out if asked
    if opts.list:
        for srv in opmlgen.list_supported_services():
            print "\t%s" % srv
        return 0

    # Get service object
    try:
        service = opmlgen.get_service_by_name(opts.service)
    except OPMLGenError, err:
        LOG.error(str(err))
        return 1

    try:
        save_to_file(service, opts.output, opts.self, opts.sort)
    except OPMLGenError, err:
        LOG.error(str(err))
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
